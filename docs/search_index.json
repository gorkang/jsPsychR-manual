[["index.html", "jsPsychR manual Chapter 1 What is jsPsychR?", " jsPsychR manual Gorka Navarrete 2022-07-26 Chapter 1 What is jsPsychR? jsPsychR is a group of tools to help create experimental paradigms with jsPsych, simulate participants and standardize the data preparation and analysis. We have three main tools: jsPsychMaker: Create experiments with jsPsych, randomize participants balance between conditions, etc. jsPsychMonkeys: Release monkeys to a jsPsych experiment using the R package {targets}, docker and {RSelenium}. jsPsychHelpeR: Standardize and automatize data preparation and analysis of jsPsych experiments created with jsPsychMaker. Contributors Gorka Navarrete Herman Valencia "],["intro.html", "Chapter 2 Reproducible experiments 2.1 Open and reproducible experimental pipeline 2.2 Automatization", " Chapter 2 Reproducible experiments We use different technologies to develop experiments. Some examples are Psychopy, Qualtrics, Limesurvey, jsPsych, Gorilla, etc. Each of these has advantages and disadvantages and, in general, there are pragmatic aspects to take into account when adopting one or the other (cost, type of experiment - EEG/behavioral, lab/online -, lab history and available resources, …). We opted mainly for jsPsych to run behavioral experiments because it is an open source javascript library, based on standard web technologies, and can be used online and offline. In the last years, we started working on a set of tools to create jsPsych experiments (jsPsychMaker), simulate participants (jspsychMonkeys) and standardize and automatize the data preparation and analyis (jsPsychHelpeR). Our final goal is to have a big catalog of tasks available to use in the jsPsychMaker repo. Each of the tasks should run with jspsychMonkeys to create virtual participants. And each task will have a sister script in jsPsychHelpeR to fully automate data preparation. 2.1 Open and reproducible experimental pipeline To replicate an experiment from a publication is not trivial. One of the main goals of this sytem is to be able to create, share and reproduce an experiment, its data, and data preparation and analysis without any extra effort. Furthermore, all the components of the pipeline should be Open Source, which allows reviewers, collaborators, etc. to check and run the code. This also makes it accessible to anyone with a computer and access to the internet, eliminating cost constrains. With this system you can create a paradigm, simulate data and prepare data and analysis almost automatically (including anonimization). The system output is standardized, so names of variables and the structure of the data are predictable. Finally, the plots, tables, reports and analysis are reproducible, so you can get enerything ready with simulated data, preregister or even better, go for a registered report and just relaunch the data preparation and analysis when the participant’s data arrive with a single command. 2.2 Automatization We tried to make a few basic things right, but this is an evolving project, and some things are more complex than one would want. Please do report the issues you find: jsPsychMaker issues jsPsychMonkeys issues jsPsychHelpeR issues SOURCE: https://xkcd.com/1425/ "],["QuickGuide.html", "Chapter 3 Quick Guide 3.1 jsPsychMaker: Create an experimental protocol 3.2 jsPsychMonkeys: Simulate participants 3.3 jsPsychHelpeR: Prepare data", " Chapter 3 Quick Guide 3.1 jsPsychMaker: Create an experimental protocol See the jsPsychMaker chapter for more detailed instructions. Outline Download jsPsychMaker Go to the folder canonical_protocols and edit the config.js file to select the tasks you need Open index.html in your browser 1) Download jsPsychMaker Open RStudio and run the following two lines in the console. This will download the last stable jsPsychMaker version v0.2.0. When you finish, a new RStudio project named jsPsychMaker-0.0.2 will open. # Make sure you have {usethis} installed if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) # Download last stable jsPsychMaker version to the Downloads folder usethis::use_course(url = &quot;https://github.com/gorkang/jsPsychMaker/archive/refs/tags/v0.2.0.zip&quot;, destdir = &quot;~/Downloads/&quot;) # Alternatively, download the dev version: # usethis::use_course(url = &quot;gorkang/jsPsychMaker&quot;, destdir = &quot;~/Downloads/&quot;) 2) Edit configuration Go to folder canonical_protocols and edit config.js. The variable tasks should contain the name of an array of the tasks we want to run. Available tasks: - full list of tasks in the Github repo - details of available tasks (Spanish) - If you need a NEW task fill this form 3) Run experiment The experiment is ready to run on your computer. Open index.html in Google Chrome or your favourite (and up to date) browser. 3.2 jsPsychMonkeys: Simulate participants See the jsPsychMonkeys chapter for more detailed instructions. jsPsychMonkeys uses Selenium inside a Docker container to guarantee each session is a clean session. On Linux it’s use and configuration is trivial, but on Windows it can be trickier. Outline Download jsPsychMonkeys Setup Run Monkeys 1) Download jsPsychMonkeys if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) usethis::use_course(url = &quot;gorkang/jsPsychMonkeys&quot;, destdir = &quot;~/Downloads/&quot;) 2) Setup Run setup: source(\"setup.R\"). This will install the packages needed. Ubuntu You may need to install some system libraries first: sudo apt install libssl-dev libcurl4-openssl-dev libxml2-dev Mac (?) Windows Download and install docker: https://docs.docker.com/docker-for-windows/install/ (~ 500MB) 3) Run Monkeys Open run.R and follow the instructions. Mainly: Open _targets.R file: rstudioapi::navigateToFile(\"_targets.R\") Edit parameters_monkeys_minimal. For example, launch participants 1 to 5 to the 999 protocol locally: parameters_monkeys_minimal = list(uid = 1:5, local_folder_tasks = \"Downloads/999\") Run Monkeys!: targets::tar_make() 3.3 jsPsychHelpeR: Prepare data See the jsPsychHelpeR chapter for more detailed instructions. Outline Download jsPsychHelpeR Run setup Run data preparation 1) Download jsPsychHelpeR Run the following two lines in a RStudio console. A new RStudio session will appear. You should see something similar to on the top right corner of your RStudio. # Make sure you have {usethis} installed if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) # Download jsPsychHelpeR version to the Downloads folder usethis::use_course(url = &quot;gorkang/jsPsychHelpeR&quot;, destdir = &quot;~/Downloads/&quot;) 2) Run setup Open the file run.R and run initial setup: # Load functions invisible(lapply(list.files(&quot;./R&quot;, full.names = TRUE, pattern = &quot;.R$&quot;), source)) # Run initial setup [REMEMBER to replace `999` with your project number] run_initial_setup(pid = 999) run_initial_setup() will: Delete old files Install dependencies Create necessary folders Download results files for the project (you will need the FTP credentials) Download and zip a copy of the full protocol without the data (you will need the FTP credentials) Create a _targets.R file for your project IMPORTANT: You may need to manually copy the results files to the folder data/PROJECT ID 3) Run data preparation # Run data preparation targets::tar_make() If you are curious, running targets::tar_visnetwork(targets_only = TRUE) will show the whole data preparation targets tree. "],["jsPsychMaker.html", "Chapter 4 jsPsychMaker 4.1 Available tasks 4.2 Experiment configuration 4.3 online-offline protocols 4.4 Developing tasks 4.5 Technical aspects 4.6 Common ERRORS", " Chapter 4 jsPsychMaker jsPsychMaker: Create experiments with jsPsych, randomize participants, etc. Using jsPsychMaker to build experimental protocols helps you with a few things: Create full protocols using tasks already implemented by just editing a config.js file You can also use the jsPsychMaker Shiny APP to create your config.js file Select order of tasks, randomize subsets of tasks, etc. Randomize participants to groups making sure the balance between the groups is maintained Allow participants to continue in the task where they left in the protocol Set time limits to complete the protocol Automatically discard participants over the time limit, freeing the slots for new participants Seamlessly select between online and offline protocols Simulate participants with jsPsychMonkeys Automagically get your data prepared with jsPsychHelpeR See QuickGuide for basic instructions. 4.1 Available tasks In 2022-07-26 we have 65 tasks implemented, and 28 in development. The full details about the available tasks can be checked in this document. You can always check the full list of tasks in the Github repo. If you need help creating a NEW task fill this form. Below, a table with an overview of the available tasks: 4.2 Experiment configuration In the config.js file you can find the main parameters to control how your experiment works. There is a shiny app in jsPsychMaker/app/ to help you create a config.js with the main parameters for your protocol using a visual interface. You can run the app locally or go to jsPsychMaker_config Shiny APP. You will need to copy the generated config.js file to your protocol folder. The Shiny app can also help you create a parametrized consent form (see the Consent tab). 4.2.1 Main parameters pid = 999999;: Number of protocol online = true;: true if the protocol run in a server, false if runs locally max_participants = 3;: If you have between participants conditions (participants are assign to only one of a number of conditions), this is the max number of participants per condition random_id = false;: true if you want to assign a random id to participants, false if the participant needs to input an id max_time = \"24:00:00\";: Max time to complete the protocol (HH:MM:SS; Hours:Minutes:Seconds) accept_discarded = true;: If an user is discarded (over max_time), shall be allowed to continue given there are available slots? debug_mode = false;: When testing the protocol it shows DEBUG messages, creates the DB tables if they don’t exist… It also forces the tasks with random order of items to avoid the randomization so the jsPsychMonkeys can have a reproducible behavior. 4.2.2 Order of tasks first_tasks = ['Consent'];: The protocol will start with these tasks in the specified order last_tasks = ['Goodbye'];: These tasks will be presented in the specified order after randomly_ordered_tasks Create as many blocks as needed: randomly_ordered_tasks_1 = ['TASK1', 'TASK2'];: Block of tasks in random order randomly_ordered_tasks_2 = ['TASK3'];: Block of tasks in random order secuentially_ordered_tasks_1 = ['TASK5', 'TASK4']; // Block of tasks in sequential order The final array of tasks can be build combining the above blocks. The order of the tasks in the arrays starting with “random” will be randomized. tasks = ['first_tasks', 'randomly_ordered_tasks_1', 'secuentially_ordered_tasks_1', 'randomly_ordered_tasks_2', 'last_tasks'] 4.2.3 Between-subject tasks The variable all_conditions in config.js let’s you define the Independent Variables (IV) and levels for the between-subject tasks: If there is no between-subject task: all_conditions = {\"protocol\": {\"type\": [\"survey\"]}}; If there are between-subject tasks: all_conditions = {\"NAMETASK\": {\"name_IV\": [\"name_level1\", \"name_level2\"]}}; jsPsychR will randomize participants to the different conditions keeping the unbalance between conditions to the minimum possible. 4.3 online-offline protocols jsPsych uses standard web technologies (HTML, CSS y Javascript), so that protocols should run in any modern browser (updated, please). We recommend Google Chrome just because our test suite runs with Google Chrome, so we will catch its specific issues earlier. 4.3.1 Offline If you want to run a protocol locally (on your computer, on a lab computer), you need to: set online = false; in the config.js file double click index.html jsPsychR will use IndexedDB to store the participants’ progress and balance between conditions. The output csv files will be Downloaded to the Download folder of the computer where the protocol runs. 4.3.1.1 CORS ERRORS If any of the tasks imports an html file, the Offline protocol will give a CORS error. There are ways to disable web security in your browser, but it MUST only be done if your experiment computer runs offline, otherwise you will be exposed to very bad things. See how to run chrome disabling web security to avoid CORS error: https://stackoverflow.com/questions/3102819/disable-same-origin-policy-in-chrome) google-chrome –disable-web-security –user-data-dir=“~/” 4.3.2 Online Tu run a protocol online, set online = true; in the config.js file. You will need a couple more things: MySQL running in your server A file .secrets_mysql.php with the content below Define the route to .secrets_mysql.php in controllers/php/mysql.php require_once '../../.secrets_mysql.php'; THIS FILE MUST NOT BE PUBLICLY VISIBLE FROM THE BROWSER Upload the files to the server :) &lt;?php /* DO NOT UPLOAD TO PUBLIC REPO */ $servername = &quot;127.0.0.1&quot;; $username = &quot;USERNAME OF THE DATABASE&quot;; $password = &quot;PASSWORD OF THE DATABASE&quot;; $dbname = &quot;NAME OF THE DB&quot;; ?&gt; jsPsychR will use MySQL to store the participants’ progress and balance between conditions. The output csv files will be Downloaded in the .data/ folder inside the protocol folder in the server. Before launching the final experiment, make sure you start with a clean slate! That can be summarized in 3 simple steps: Check the configuration for you experiment (config.js) and make sure all is well. Some of the critical bits are: pid = 999; // SHOULD have your project ID! online = true; // true is good max_participants = 100; // Max participants per contition [number] max_time = &quot;24:00:00&quot;; // Max time to complete the protocol [HH:MM:SS] debug_mode = false; // SHOULD be false Check that the .data/ folder for your protocol is empty in the server. You will likely have remains of the piloting and Monkeys. Clean up the MySQL data associated to your protocol. SET @PID = 999; // HERE YOUR PROTOCOL ID! delete from experimental_condition where id_protocol=@PID; delete from user where id_protocol=@PID; delete from user_condition where id_protocol=@PID; delete from user_task where id_protocol=@PID; delete from task where id_protocol=@PID; delete from protocol where id_protocol=@PID; You will most likely need help from the server admin to perform these steps. 4.4 Developing tasks Remember to place an if (debug_mode == 'false') before the randomization of the item order so when running in debug_mode, the items are not randomized. This is important so the behaviour of the jsPsychMonkeys is reproducible: if (debug_mode == 'false') NAMETASK = jsPsych.randomization.repeat(NAMETASK,1); 4.4.1 Need help implementing a task! If you need help developing new tasks, you can open a new Issue in the jsPsychMaker Github. We will ask you to add the details about the task in the NEW tasks document. Once the task is implemented, our goal is to always end up having a sister task preparation script in jsPsychHelpeR. You can try to create the preparation script and do a Pull request, or ask for help opening a new Issue in the jsPsychHelpeR Github. 4.5 Technical aspects When index.html is launched: Checks if there are available slots When an uid is assigned: questions array is created between-participants conditions are assigned and stored in the DB (MySQL if online, IndexedDB if offline) Each question, timeline or conditional question needs to have a: data: {trialid: 'NameTask_001', procedure: 'NameTask'} The trialid identifies the trial, and the procedure makes possible to find that trial so participants can continue the tasks where they left, know when participants finished the tasks, etc. This is done in MySQL if online, IndexedDB if offline. trialid’s need to have a standardized structure, which generally conforms with NameTask_3DigitNumber. When using conditional items the structure can be a bit more complex, but not much. We use the following rules to check for non-complying trialid’s: 1{1,100}_[0-9]{2,3}$ -&gt; NameTask_2or3DigitNumber, for example BNT_001 2{1,100}[0-9]{2,3}[0-9]{1,3}$ -&gt; NameTask_2or3DigitNumber_1to3DigitsSuffix, for example BNT_002_1 3{1,100}_[0-9]{2,3}_if$ -&gt; NameTask_2or3DigitNumber, for example BNT_002_if 4{1,100}[0-9]{2,3}[0-9]{1,3}_if$ -&gt; NameTask_2or3DigitNumber, for example BNT_002_1_if 4.5.1 jsPsychMaker main changes on a task Start of a task questions = ( typeof questions != &#39;undefined&#39; &amp;&amp; questions instanceof Array ) ? questions : []; questions.push( check_fullscreen(&#39;NameOfTask&#39;) ); NameOfTask = []; Each item data: {trialid: 'NameOfTask_01', procedure: 'NameOfTask'} End of experiment if (debug_mode == &#39;false&#39;) NameOfTask = jsPsych.randomization.repeat(NameOfTask, 1); NameOfTask.unshift(instruction_screen_experiment); questions.push.apply(questions, NameOfTask) questions.push({ type: &#39;call-function&#39;, data: {trialid: &#39;NameOfTask_000&#39;, procedure: &#39;NameOfTask&#39;}, func: function(){ if (online) { var data = jsPsych.data.get().filter({procedure: &#39;NameOfTask&#39;}).csv(); } else { var data = jsPsych.data.get().filter({procedure: &#39;NameOfTask&#39;}).json(); } saveData(data, online, &#39;NameOfTask&#39;); } }); 4.5.2 Conditional questions var question001 = { type: &#39;survey-multi-choice-vertical&#39;, questions: [{prompt: &#39;&lt;div class=&quot;justified&quot;&gt;¿Usted se ha vacunado contra el coronavirus / covid-19?&lt;/div&gt;&#39;, options: [&#39;&amp;nbsp;Si&#39;, &#39;&amp;nbsp;No&#39;], required: true, random_options: false, horizontal: false}], data: {trialid: &#39;PVC_001&#39;, procedure: &#39;PVC&#39;} }; PVC.push(question001); var question001_1 = { type: &#39;survey-multi-choice-vertical&#39;, questions: [{prompt: &#39;&lt;div class=&quot;justified&quot;&gt;¿Usted se va a vacunar contra el coronavirus covid-19?&lt;/div&gt;&#39;, options: [&#39;&amp;nbsp;Si&#39;, &#39;&amp;nbsp;No&#39;, &#39;&amp;nbsp;No estoy seguro&#39;], required: true, random_options: false, horizontal: false}], data: {trialid: &#39;PVC_001_1&#39;, procedure: &#39;PVC&#39;} }; var if_question001_1 = { timeline: [question001_1], data: {trialid: &#39;PVC_001_1_if&#39;, procedure: &#39;PVC&#39;}, conditional_function: function(){ let data = (JSON.parse((jsPsych.data.get().values().find(x =&gt; x.trialid === &#39;PVC_001&#39;))[&#39;response&#39;])[&#39;Q0&#39;]).trim(); if((data) == &#39;No&#39;){ return true; } else { return false; } } }; PVC.push(if_question001_1); 4.6 Common ERRORS If you get the following error in the console: Uncaught TypeError: Cannot read properties of undefined (reading 'procedure') Run this in the console: for (var i = 0; i &lt; questions.length; i++) { console.log(i + questions[i].data[&quot;procedure&quot;]) } It will stop in one of the items. Go to the console, check the array questions and go to the number that failed. When you know the task and item that fails, you probably need to add: data: {trialid: 'TASKNAME_ITEMNUMBER', procedure: 'TASKNAME'} a-zA-Z0-9↩︎ a-zA-Z0-9↩︎ a-zA-Z0-9↩︎ a-zA-Z0-9↩︎ "],["jsPsychMonkeys.html", "Chapter 5 jsPsychMonkeys 5.1 How to simulate participants 5.2 Parameters", " Chapter 5 jsPsychMonkeys jsPsychMonkeys: Release monkeys to a jsPsych experiment using the R package {targets}, docker and {RSelenium}. With jsPsychMonkeys you can simulate participants and easily do the following: Simulate participants online and offline Simulate participants sequentially and in parallel Ask your Monkeys to take pictures of each screen Make the behavior of the Monkeys reproducible setting a random seed associated with their unique id Store logs of the process, including console logs with errors Watch your participants randomly click things in VNC See QuickGuide for basic instructions. 5.1 How to simulate participants If the QuickGuide configuration steps didn’t work… You may need to do one of the things below: Run participants manually Use a Linux computer or create a Linux partition Create a Linux virtual machine from where to simulate participants. You can use Virtualbox to install Ubuntu. Once there, you can use this manual to prepare the system to run R &amp; RStudio 5.2 Parameters Edit the Parameters section of the _targets.R file. The minimal set of parameters needed are: parameters_monkeys_minimal = list( uid = 1:10, # User id&#39;s for the participants. local_folder_tasks = &quot;Downloads/tests/2&quot; # Location of your jsPsych protocol ) 5.2.1 Release the Monkeys! If you want a sequential process: targets::tar_make() If you want a parallel horde of monkeys: targets::tar_future_make(workers = 2) You can set as many parallel workers as you want. With targets::tar_make_future(workers = future::availableCores() - 1) you can have as many workers as your computer cores minus 1. In run.R you can see the typical set of commands needed for a variety of situations. 10 Monkeys completing a protocol in parallel. You can use targets::tar_watch(seconds = 10, outdated = FALSE, targets_only = TRUE) to see the live progress: 5.2.2 Launch monkeys on a server You will need a .vault/SERVER_PATH.R file that contains the path where the protocols are located in your server: server_path = \"http://URL_OF_YOUR_SERVER/PROTOCOLS_GENERAL_FOLDER/\" With the server_folder_tasks you will set the subfolder where the protocol is located. In the example below the monkeys would go to, http://URL_OF_YOUR_SERVER/PROTOCOLS_GENERAL_FOLDER/1 parameters_monkeys_minimal = list( uid = 1:10, # User id&#39;s for the participants. server_folder_tasks = &quot;1&quot; # Location of your jsPsych protocol ) 5.2.3 Parameters for parameters_monkeys_minimal There are a few parameters that can be useful: uid_URL = TRUE: The uid is passed in the URL (e.g. &amp;uid=1) local_folder_tasks = rep(\"Downloads/tests/test_prototol\", 25): Passing a vector of multiple tasks will make the monkeys to complete all of them. keep_alive = TRUE Keep the docker container alive after completing the tasks DEBUG = TRUE Activate DEBUG mode. Lot’s of stuff will show up in the console. open_VNC = TRUE Activate DEBUG mode and open a VNC container to see the monkey’s progress. screenshot = TRUE The monkeys will take a picture of all the pages they see. The .png files are stored in outputs/screenshots debug_file = TRUE Activate DEBUG mode and store all the console output in the outputs/log big_container = TRUE Sets the Shared memory size (/dev/shm) to 2 gigabytes. This is useful to avoid long/complex protocols to crash disable_web_security = TRUE If you are running a local protocol that loads external files (e.g. consent form in a html file), you may need this. Only works with Google Chrome. console_logs = TRUE Store the browser’s console logs. Only works with Google Chrome forced_random_wait = TRUE Will wait a randomly sampled number of seconds on page 4 forced_seed = 11 Set a random seed so the Monkeys’ behavior will be fully reproducible forced_refresh = 20 Refresh browser in page 20 (if TRUE is given, it will refresh in a randomly sampled page) 5.2.3.1 Parameters details local_folder_tasks: If the folder is not accessible to Docker (anything outside the Download folder), jsPsychMonkeys will create a copy of the protocol in Downloads/JSPSYCH/ "],["jsPsychHelpeR.html", "Chapter 6 jsPsychHelpeR 6.1 How to prepare data 6.2 Basics 6.3 Advanced 6.4 Helper functions 6.5 Technical aspects 6.6 Common ERRORS", " Chapter 6 jsPsychHelpeR jsPsychHelpeR: Standardize and automatize data preparation and analysis of jsPsych experiments created with jsPsychMaker. jsPsychHelpeR will lend you a hand automatizing and standardizing your data preparation and analysis. Use a completely open, reproducible and automatic process to prepare your data Data preparation ready for &gt; 50 tasks (see here the list of tasks) Get tidy output dataframes for each task, and tidy general dataframes for the whole protocol Include tests for common issues Automatic reports with progress, descriptives, codebook, etc. See QuickGuide for basic instructions. 6.1 How to prepare data Our goal is that jsPsychMaker task has a sister script on jsPsychHelpeR to help prepare the data automatically. If a task you need does not have one, you can try to create the script yourself and do a pull request in the jsPsychHelpeR repo, or fill the NEW tasks document with the details to help us create the correction script. If you already ran a pilot experiment, simply: Download jsPsychHelpeR: if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) usethis::use_course(&quot;gorkang/jsPsychHelpeR&quot;) run_initial_setup(): go to the file run.R and run the following two lines. They will: Try to make sure you have all the dependencies, folders, etc. Download all the data from your protocol (you will need the FTP credentials) Download and zip a copy of the full protocol without the data (you will need the FTP credentials) Create a customized _targets.R file adapted to the data of your protocol, so data preparation can run automagically invisible(lapply(list.files(&quot;./R&quot;, full.names = TRUE, pattern = &quot;.R$&quot;), source)) run_initial_setup(pid = &quot;999&quot;, download_files = TRUE, download_task_script = TRUE) This should work on Ubuntu, if you have the FTP credentials, and sshpass and rsync installed. If you don’t have the credentials, or some of the requirements to download the files, you can manually copy the .csv files to the data/PROJECT ID folder, and then run the offline version of run_initial_setup(): invisible(lapply(list.files(&quot;./R&quot;, full.names = TRUE, pattern = &quot;.R$&quot;), source)) run_initial_setup(pid = &quot;999&quot;, download_files = FALSE, download_task_script = FALSE) We use the targets package. The whole process can be reproduced running targets::tar_make() A nice visualization of all the pre-processing steps can be seen with targets::tar_visnetwork(targets_only = TRUE) The file _targets.R contains the important parameters and calls to all the functions used when running targets::tar_make() To see more detail about any specific step, you can: Go to the relevant function Load the input parameters of the function with debug_function(NAME_OF FUNCTION). Alternatively, manually use targets::tar_load(NAME_OF_TARGET) Run the code step by step as you would normally do 6.2 Basics jsPsychHelpeR uses as input a data created with a jsPsychMaker experimental protocol. 6.2.1 Inputs The input data folder will be named after the protocol_id, for example 999/ and needs to be placed in the data/ folder of the jsPsychHelpeR project data/YOUR_PROJECT_NUMBER: The data folder can contain either multiple .csv files, or a single .zip file There will be a single .csv file for each participant and task of the protocol. For example: 999_Consent_original_2022-04-02T205622_1.csv: [project: 999]_[experimento: Consent]_[version: original]_[datetime: 2022-04-02T205622]_[participant id: 1] 6.2.2 Outputs When the pipeline successfully runs with targets::tar_make(), a number of outputs will be created. All the outputs can be found in the /outputs folder. The only exception is the sensitive data and reports, which can be found in .vault/outputs. WARNING: The ‘.vault/’ folder MUST NOT be made public. 6.2.2.1 Output folders The outputs will be organized in different folders: Dataframes for different stages of data processing can be found in outputs/data Temporary files for manual correction are in outputs/data/manual_correction (the final manual correction files must be place by the user in data/manual_correction). WARNING: These will be overwritten each time the pipeline runs Plots, tables and reports are in outputs/plots, outputs/tablesand outputs/reports respectively. Test outputs are in outputs/tests_outputs Anonymized Raw data will be moved to .vault/data_vault/ 6.2.2.2 Output dataframes There will be a single data frame (df) for each of the tasks in outputs/data, plus a data frame (DF) for each of the steps of the data preparation, and a dictionary file listing all the available tasks. We store the files in two formats, csv and rds: DF_raw.csv: All the data/project_id/ csv files combined on a single file. We only add the columns “project”, “experimento”, “version”, “datetime”, “id” by parsing the filenames DF_clean.csv: Clean version of the raw file ready to process the individual tasks df_ShortNameOfTask.csv: One df for each of the tasks of the protocol after being processed with the prepare_ShortNameOfTask() functions DF_joined.csv: all the processed tasks joined in a single DF DF_analysis: only the total scores and dimensions from DF_joined (columns ending in _DIRt, _STDt, _DIRd, _RELd, STDd). Can be visually explored using the shiny app in Rmd/app.R DICCIONARY_tasks.csv: list of all tasks in the protocol 6.2.2.3 Output dataframes column names All the output processed dataframes columns are named in a standardized way: ShortNameOfTask_ItemNumber_RAW: raw responses of participants for individual items ShortNameOfTask_ItemNumber_DIR: processed raw responses following the task correction instructions (e.g. inverting certain items, converting strings to numbers, computing accuracy…) ShortNameOfTask_RAW_NA: number of missing data (NA) in the RAW responses ShortNameOfTask_DIR_NA: number of missing data (NA) in the DIR responses. If it is not equal to ShortNameOfTask_RAW_NA there is something wrong in the items correction. ShortNameOfTask_DimensionName_DIRd: scores for a specific dimension (d) in a task, calculated following task correction instructions (e.g. summing or averaging certain items) ShortNameOfTask_DimensionName_RELd: scores for a specific dimension (d) in a task, calculated following task correction instructions AND after filtering items with low reliability. See Reliability section for more information. ShortNameOfTask_DimensionName_STDd: standardized score for a dimension (d) ShortNameOfTask_DIRt: total (t) score for a task calculated following task correction instructions (e.g. summing or averaging all items) ShortNameOfTask_STDt: standardized (t) score for a task 6.3 Advanced 6.3.1 Create your own reports You can use any of the template reports in the _targets.R file, or create your own reports. We will start opening one of the template reports: rstudioapi::navigateToFile(\"doc/report_analysis.Rmd\"). Edit the RMarkdown file to adapt it to your needs. If you already did targets::tar_make(), when running targets::tar_load(DF_analysis) the dataframe DF_analysis will load in your Environment. Go back to the _targets.R file: Look for # Analysis report and uncomment the following lines: # tar_render(report_analysis, &quot;doc/report_analysis.Rmd&quot;, # output_file = paste0(&quot;../outputs/reports/report_analysis.html&quot;)), When you finished editing and uncomented the tar_render command, go back to the run.R file: targets::tar_make() 6.3.2 Create new tasks To create the correction script for a new task, you start with: create_new_task(short_name_task = \"NAMETASK\") This will: create a new file from a template correction script (R_tasks/prepare_TEMPLATE.R) adapt it to your short_name_task to make everything as standardized as possible open the new prepare_NAMETASK.R file If the parameter get_dimensions_googledoc = TRUE: The NEW tasks document is checked. If the document has been filled properly, it will show in the console standardized strings (ready to be copy/pasted to the new prepare_NAMETASK.R file) about: dimension names items corresponding to each dimension dimension calculation inverse items numeric conversion of items All the prepare_NAMEOFTASK.R scripts on the R_tasks/ folder have been created starting from the same template. The only exception are the experimental tasks and some surveys with particularities that require more complex adaptations. When you finish implementing the correction script, please do a Pull request so we can add you script to the pool. If you have not already, please help us filling up details about the task in the NEW tasks document. 6.3.3 How to fill the NEW tasks document The best way is to check the main document with information about all the tasks (Tareas jsPsychR) and find a similar task to copy/paste and adapt it in the NEW tasks document. The main suggestion is to be very consistent. For example, when entering the informacion about numeric conversion in the Puntajes_items tab: All the cells must be: 1 = Mucho 2 = Poco … DO NOT do things like: 1: Mucho 1 Mucho 1 pto = Mucho Mucho 1 Please, make sure you fill out all the details in all the tabs. 6.3.4 DEBUG tasks At the begining of each of the R_tasks/prepare_NAMETASK.R scripts you will find a commented debug_function(prepare_NAMETASK) line. When running it, it will load the input parameters for the task. From there, you can work inside of the preparation scipt as you would normally do in a R script. If you get the error \"Error in debug_function(prepare_NAMETASK) : could not find function 'debug_function'debug_function()does nor work\" you will need to load all the functions in the R/ folder first. You can do this in one of three ways: CONTROL + P shortcut will work if the run_initial_setup() completed correctly (at least on Ubuntu systems). Run targets::tar_load_globals() Or directly, source all the scripts in the R/ folder: invisible(lapply(list.files(\"./R\", full.names = TRUE, pattern = \".R$\"), source)) 6.4 Helper functions 6.4.1 Reliability You can use the auto_reliability() function to help you automatically filter items with low reliability (although doing this automatically is probably a bad idea). The function uses psych::alpha() and filters by default items with an r.drop &lt;= 0.2. See psych::alpha() help for more details. IMPORTANT: Using psych::omega() is generally a better idea, see the alpha help page. An example can be found in prepare_REI40(). The basic logic would be: # Define items for a specific dimension items_DIRd1 = c(&quot;01&quot;, &quot;02&quot;, &quot;03&quot;, &quot;04&quot;, &quot;05&quot;, &quot;06&quot;, &quot;07&quot;, &quot;08&quot;, &quot;09&quot;, &quot;10&quot;) # Calculate reliability REL1 = auto_reliability(DF_wide_RAW, short_name_scale = short_name_scale_str, items = items_DIRd1, min_rdrop = 0.2) # Store item selection in a variable items_RELd1 = REL1$item_selection_string # In the final Dimension calculation, use the item selection including only the items with a reliability over the defined threshold ## See `items_RELd1` below !!names_list$name_RELd[1] := rowMeans(select(., paste0(short_name_scale_str, &quot;_&quot;, items_RELd1, &quot;_DIR&quot;)), na.rm = TRUE), # Compare it with the calculation including the original items ## See `items_DIRd1` below !!names_list$name_DIRd[1] := rowMeans(select(., paste0(short_name_scale_str, &quot;_&quot;, items_DIRd1, &quot;_DIR&quot;)), na.rm = TRUE), 6.5 Technical aspects 6.5.1 How trialid’s are processed See PRFBM: If more than one response per screen Item: PRFBM_04 Responses: {\"daño\":\"Parcialmente en desacuerdo\",\"beneficio\":\"Parcialmente en desacuerdo\"} final trialids: PRFBM_04_beneficio and PRFBM_04_daño 6.6 Common ERRORS 6.6.1 run_initial_setup(): x Can find server credentials in &#39;.vault/.credentials&#39; x 0 tasks found for protocol &#39;TU NUMERO DE PROYECTO&#39;. NOT creating _targets.R file 6.6.1.1 On Linux (Ubuntu): IF you have the server credentials: Open .credentials_TEMPLATE rstudioapi::navigateToFile(\".vault/.credentials_TEMPLATE\") Edit the file with your server credentials Rename the file to .credentials IF you DON’T have the credentials but you have the .csv results files: Copy the csv files to the folder data/YOUR_PROJECT_NUMBER Run again run_initial_setup() 6.6.2 On Mac or Windows: Copy the csv files to the folder data/YOUR_PROJECT_NUMBER Run again run_initial_setup() "],["jsPsychRAdmins.html", "Chapter 7 jsPsychR Admins", " Chapter 7 jsPsychR Admins There are a number of helper functions to make some of the jsPsychR admins tasks easier. For example, we can use check_missing_prepare_TASK() to: Download all the protocols (without data) to a local folder (sync_protocols = TRUE) Check the trialid’s of all the tests are OK (check_trialids = TRUE) Check there are no duplicate short_name of tasks in the tareas jsPsychR and NUEVAS tareas: # Open jsPsychHelpeR RStudio project # Load check_missing_prepare_TASK() function # invisible(lapply(list.files(&quot;./R&quot;, full.names = TRUE, pattern = &quot;.R$&quot;), source)) source(here::here(&quot;../jsPsychHelpeR/R/check_missing_prepare_TASK.R&quot;)) # check_missing_prepare_TASK() will download to ../CSCN-server/protocols all the protocols from the server DF_missing = check_missing_prepare_TASK(sync_protocols = FALSE, check_trialids = TRUE, delete_nonexistent = TRUE) ## New names: ## ## ── FOLDER: protocols/ ## ────────────────────────────────────────────────────────── ## ## ── Checking /13 ## ──────────────────────────────────────────────────────────────── ## • `` -&gt; `...12` ## 1 ISSUES: ## - experiment: faux_pas ## - trialid: faux_pas_001 ## ## ── Checking /15 ──────────────────────────────────────────────────────────────── ## 1 ISSUES: ## - experiment: ITC ## - trialid: question_ + pad( (repetition_count * 2) ## ## ── Checking /16 ──────────────────────────────────────────────────────────────── ## 2 ISSUES: ## - experiment: RMET ## - trialid: question000_1, question000_2 ## ## ── Checking /18 ──────────────────────────────────────────────────────────────── ## 2 ISSUES: ## - experiment: RMET ## - trialid: question001_1, question001_2 ## ## ── Checking /22 ──────────────────────────────────────────────────────────────── ## 2 ISSUES: ## - experiment: FONDECYT2022E1 ## - trialid: if_instructions_000, FONDECYT2022E1 + _giro_check_ending ## ## ── Checking /4 ───────────────────────────────────────────────────────────────── ## 6 ISSUES: ## - experiment: FORM4 ## - trialid: FORM_01, FORM_02, FORM_03, FORM_04, FORM_05, FORM_06 ## ## ── Checking /8 ───────────────────────────────────────────────────────────────── ## 2 ISSUES: ## - experiment: Goodbye, IRS ## - trialid: question001, effort ## ## ── Checking /999 ─────────────────────────────────────────────────────────────── ## 4 ISSUES: ## - experiment: HRPVB, HRPVBpost ## - trialid: HRPVB_BB, HRPVB_MM, HRPVBpost_BB, HRPVBpost_MM ## ## ── FOLDER: protocols/test/protocols_DEV/ ─────────────────────────────────────── ## ## ── Checking /22 ──────────────────────────────────────────────────────────────── ## 2 ISSUES: ## - experiment: FONDECYT2022E1 ## - trialid: if_instructions_000, FONDECYT2022E1 + _giro_check_ending ## ## ── FOLDER: protocols/999/ ────────────────────────────────────────────────────── ## ## ── Checking /999 ─────────────────────────────────────────────────────────────── ## 4 ISSUES: ## - experiment: HRPVB, HRPVBpost ## - trialid: HRPVB_BB, HRPVB_MM, HRPVBpost_BB, HRPVBpost_MM ## ## ── CHECK duplicates ──────────────────────────────────────────────────────────── ## ✔ No duplicated short_name in the Google docs # - Tasks with no prepare_TASK() script! # - Tasks NOT in Google Doc # - Check trialid&#39;s are OK DF_missing ## $DF_FINAL ## # A tibble: 95 × 9 ## task missing_script missi…¹ missi…² proto…³ EMAIL.x Nombre Descr…⁴ EMAIL.y ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 AIM &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 12, 17… &lt;NA&gt; Grupo… Modelo… &lt;NA&gt; ## 2 Bank &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 20 &lt;NA&gt; Detal… Detall… &lt;NA&gt; ## 3 BART &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 11, 99… &lt;NA&gt; Ballo… Medida… &lt;NA&gt; ## 4 BDI BDI &lt;NA&gt; &lt;NA&gt; 19 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; joaqui… ## 5 BNT &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 2, 22,… &lt;NA&gt; Berli… Breve,… &lt;NA&gt; ## 6 bRCOPE &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 999, t… &lt;NA&gt; Escal… Evalúa… &lt;NA&gt; ## 7 CAS &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 8, 999… &lt;NA&gt; COVID… Evalúa… &lt;NA&gt; ## 8 CEL CEL &lt;NA&gt; &lt;NA&gt; test/p… &lt;NA&gt; Cuest… Mide l… jmoral… ## 9 CIT CIT &lt;NA&gt; &lt;NA&gt; 23, 28… &lt;NA&gt; Test … Prueba… buitra… ## 10 Consent &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; 10, 11… &lt;NA&gt; Conse… Consen… &lt;NA&gt; ## # … with 85 more rows, and abbreviated variable names ¹​missing_googledoc, ## # ²​missing_task, ³​protocols, ⁴​Descripcion ## # ℹ Use `print(n = ...)` to see more rows ## ## $DF_missing_tasks ## # A tibble: 0 × 4 ## # … with 4 variables: task &lt;chr&gt;, Nombre &lt;chr&gt;, Descripcion &lt;chr&gt;, EMAIL &lt;chr&gt; ## # ℹ Use `colnames()` to see all variable names ## ## $DF_missing_script ## # A tibble: 25 × 2 ## task protocols ## &lt;chr&gt; &lt;chr&gt; ## 1 BDI 19 ## 2 CEL test/protocols_DEV/27 ## 3 CIT 23, 28, test/protocols_DEV/23, test/protocols_DEV/28 ## 4 CRQ 23, 28, test/protocols_DEV/23, test/protocols_DEV/28 ## 5 CTT 23, 28, test/protocols_DEV/23, test/protocols_DEV/28 ## 6 DEMOGRfondecyt2022E1 22, test/protocols_DEV/22 ## 7 ESV test/protocols_DEV/25 ## 8 faux_pas 13 ## 9 HC test/tasks_DEV ## 10 ICvsID 23, 28, test/protocols_DEV/23, test/protocols_DEV/28 ## # … with 15 more rows ## # ℹ Use `print(n = ...)` to see more rows ## ## $DF_missing_googledoc ## # A tibble: 5 × 2 ## task protocols ## &lt;chr&gt; &lt;chr&gt; ## 1 DEMOGR24 test/protocols_DEV/24 ## 2 DEMOGRfondecyt2022E1 22, test/protocols_DEV/22 ## 3 faux_pas 13 ## 4 HC test/tasks_DEV ## 5 PBS 17, 20, 8, 999, test/canonical_protocol_DEV ## ## $MISSING_tabs ## NULL DF_missing$DF_FINAL %&gt;% tidyr::replace_na(list(missing_script = &quot;&quot;, missing_googledoc = &quot;&quot;, missing_task = &quot;&quot;)) ## # A tibble: 95 × 9 ## task missing_script missi…¹ missi…² proto…³ EMAIL.x Nombre Descr…⁴ EMAIL.y ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 AIM &quot;&quot; &quot;&quot; &quot;&quot; 12, 17… &lt;NA&gt; Grupo… Modelo… &lt;NA&gt; ## 2 Bank &quot;&quot; &quot;&quot; &quot;&quot; 20 &lt;NA&gt; Detal… Detall… &lt;NA&gt; ## 3 BART &quot;&quot; &quot;&quot; &quot;&quot; 11, 99… &lt;NA&gt; Ballo… Medida… &lt;NA&gt; ## 4 BDI &quot;BDI&quot; &quot;&quot; &quot;&quot; 19 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; joaqui… ## 5 BNT &quot;&quot; &quot;&quot; &quot;&quot; 2, 22,… &lt;NA&gt; Berli… Breve,… &lt;NA&gt; ## 6 bRCOPE &quot;&quot; &quot;&quot; &quot;&quot; 999, t… &lt;NA&gt; Escal… Evalúa… &lt;NA&gt; ## 7 CAS &quot;&quot; &quot;&quot; &quot;&quot; 8, 999… &lt;NA&gt; COVID… Evalúa… &lt;NA&gt; ## 8 CEL &quot;CEL&quot; &quot;&quot; &quot;&quot; test/p… &lt;NA&gt; Cuest… Mide l… jmoral… ## 9 CIT &quot;CIT&quot; &quot;&quot; &quot;&quot; 23, 28… &lt;NA&gt; Test … Prueba… buitra… ## 10 Consent &quot;&quot; &quot;&quot; &quot;&quot; 10, 11… &lt;NA&gt; Conse… Consen… &lt;NA&gt; ## # … with 85 more rows, and abbreviated variable names ¹​missing_googledoc, ## # ²​missing_task, ³​protocols, ⁴​Descripcion ## # ℹ Use `print(n = ...)` to see more rows # Tasks ready to create prepare_*.R script DF_missing$DF_FINAL %&gt;% filter(!is.na(missing_script) &amp; is.na(missing_googledoc)) ## # A tibble: 22 × 9 ## task missing_script missin…¹ missi…² proto…³ EMAIL.x Nombre Descr…⁴ EMAIL.y ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 BDI BDI &lt;NA&gt; &lt;NA&gt; 19 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; joaqui… ## 2 CEL CEL &lt;NA&gt; &lt;NA&gt; test/p… &lt;NA&gt; Cuest… Mide l… jmoral… ## 3 CIT CIT &lt;NA&gt; &lt;NA&gt; 23, 28… &lt;NA&gt; Test … Prueba… buitra… ## 4 CRQ CRQ &lt;NA&gt; &lt;NA&gt; 23, 28… &lt;NA&gt; Escal… &lt;NA&gt; buitra… ## 5 CTT CTT &lt;NA&gt; &lt;NA&gt; 23, 28… &lt;NA&gt; Test … &lt;NA&gt; buitra… ## 6 ESV ESV &lt;NA&gt; &lt;NA&gt; test/p… &lt;NA&gt; Empat… &lt;NA&gt; altron… ## 7 ICvsID ICvsID &lt;NA&gt; &lt;NA&gt; 23, 28… &lt;NA&gt; Impar… &lt;NA&gt; buitra… ## 8 ITC ITC &lt;NA&gt; &lt;NA&gt; 15, 99… &lt;NA&gt; Inter… &lt;NA&gt; &lt;NA&gt; ## 9 LOT LOT &lt;NA&gt; &lt;NA&gt; 19 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; joaqui… ## 10 LSNS LSNS &lt;NA&gt; &lt;NA&gt; 23, te… &lt;NA&gt; Escal… &lt;NA&gt; buitra… ## # … with 12 more rows, and abbreviated variable names ¹​missing_googledoc, ## # ²​missing_task, ³​protocols, ⁴​Descripcion ## # ℹ Use `print(n = ...)` to see more rows DF_missing$DF_FINAL %&gt;% filter(!is.na(missing_script) | !is.na(missing_googledoc)) %&gt;% filter(!task %in% c(&quot;DEMOGR24&quot;, &quot;DEMOGRfondecyt2022E1&quot;, &quot;ITC&quot;, &quot;fauxPasEv&quot;)) %&gt;% # &quot;MDDF_respaldo&quot;, &quot;mic_test&quot;, &quot;faux_pas&quot;, select(-matches(&quot;missing&quot;), -Nombre, -Descripcion) ## # A tibble: 24 × 4 ## task protocols EMAIL.x EMAIL.y ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 BDI 19 &lt;NA&gt; joaqui… ## 2 CEL test/protocols_DEV/27 &lt;NA&gt; jmoral… ## 3 CIT 23, 28, test/protocols_DEV/23, test/protocols_DEV/28 &lt;NA&gt; buitra… ## 4 CRQ 23, 28, test/protocols_DEV/23, test/protocols_DEV/28 &lt;NA&gt; buitra… ## 5 CTT 23, 28, test/protocols_DEV/23, test/protocols_DEV/28 &lt;NA&gt; buitra… ## 6 ESV test/protocols_DEV/25 &lt;NA&gt; altron… ## 7 faux_pas 13 &lt;NA&gt; &lt;NA&gt; ## 8 HC test/tasks_DEV &lt;NA&gt; &lt;NA&gt; ## 9 ICvsID 23, 28, test/protocols_DEV/23, test/protocols_DEV/28 &lt;NA&gt; buitra… ## 10 LOT 19 &lt;NA&gt; joaqui… ## # … with 14 more rows ## # ℹ Use `print(n = ...)` to see more rows "],["references.html", "References", " References jsPsych targets "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
