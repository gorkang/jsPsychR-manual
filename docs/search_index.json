[["index.html", "jsPsychR manual Chapter 1 What is jsPsychR?", " jsPsychR manual Gorka Navarrete 2021-10-07 Chapter 1 What is jsPsychR? jsPsychR is a group of tools to help create experimental paradigms with jsPsych, simulate participants and standardize the data preparation and analysis. We have three main tools: jsPsychMaker: Create experiments with jsPsych, randomize participants, etc. jsPsychMonkeys: Release monkeys to a jsPsych experiment using the R package {targets}, docker and {RSelenium}. jsPsychHelpeR: Standardize and automatize data preparation and analysis of jsPsych experiments created with jsPsychMaker. "],["intro.html", "Chapter 2 Reproducible experiments 2.1 Open and reproducible experimental pipeline 2.2 Automatization", " Chapter 2 Reproducible experiments We use different technologies to develop experiments. Some examples are Psychopy, Qualtrics, Limesurvey, jsPsych, Gorilla, etc. Each of these has advantages and disadvantages and, in general, there are pragmatic aspects to take into account when adopting one or the other (cost, type of experiment - EEG/behavioral, lab/online -, lab history and available resources, …). We opted mainly for jsPsych to run behavioral experiments because it is an open source javascript library, based on standard web technologies, and can be used online and offline. In the last years, we started working on a set of tools to create jsPsych experiments (jsPsychMaker), simulate participants (jspsychMonkeys) and standardize and automatize the data preparation and analyis (jsPsychHelpeR). Our final goal is to have a big catalog of tasks available to use in the jsPsychMaker repo. Each of the tasks should run with jspsychMonkeys to create virtual participants. And each task will have a sister script in jsPsychHelpeR to fully automate data preparation. 2.1 Open and reproducible experimental pipeline To replicate an experiment from a publication is not trivial. One of the main goals of this sytem is to be able to create, share and reproduce an experiment, its data, and data preparation and analysis without any extra effort. Furthermore, all the components of the pipeline should be Open Source, which allows reviewers, collaborators, etc. to check and run the code. This also makes it accessible to anyone with a computer and access to the internet, eliminating cost constrains. With this system you can create a paradigm, simulate data and prepare data and analysis almost automatically (including anonimization). The system output is standardized, so names of variables and the structure of the data are predictable. Finally, the plots, tables, reports and analysis are reproducible, so you can get enerything ready with simulated data, preregister or even better, go for a registered report and just relaunch the data preparation and analysis when the participant’s data arrive with a single command. ` 2.2 Automatization We tried to make a few basic things right, but this is an evolving project, and some things are more complex than one would want. Please do report the issues you find: jsPsychMaker issues jsPsychMonkeys issues jsPsychHelpeR issues SOURCE: https://xkcd.com/1425/ We use the {targets} package. "],["QuickGuide.html", "Chapter 3 Quick Guide 3.1 jsPsychMaker: How to create an experimental protocol 3.2 jsPsychMonkeys: Simulate participants 3.3 jsPsychHelpeR: Prepare data", " Chapter 3 Quick Guide 3.1 jsPsychMaker: How to create an experimental protocol See the jsPsychMaker chapter for more detailed instructions. Outline Download jsPsychMaker Go to the folder canonical_protocols and edit the config.js file to select the tasks you need Open index.html in your folder 1) Download jsPsychMaker Open RStudio and run the following two lines in the console. This will download the last stable jsPsychMaker version v0.0.2. When you finish, a new RStudio project named jsPsychMaker-0.0.2 will open. # Make sure you have {usethis} installed if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) # Download last stable jsPsychMaker version to the Downloads folder usethis::use_course(url = &quot;https://github.com/gorkang/jsPsychMaker/archive/refs/tags/v0.0.2.zip&quot;, destdir = &quot;~/Downloads/&quot;) # Alternatively, download the dev version version: # usethis::use_course(url = &quot;gorkang/jsPsychMaker&quot;, destdir = &quot;~/Downloads/&quot;) 2) Edit configuration Go to folder canonical_protocols and edit config.js. The variable not_ordered_experiments should contain only the tasks we want to run. See a list of tasks available in the repo. 3) Run experiment The experiment is ready to run on your computer. Open index.html in Google Chrome or your favourite (and up to date) browser. 3.2 jsPsychMonkeys: Simulate participants See the jsPsychMonkeys chapter for more detailed instructions. jsPsychMonkeys uses Selenium inside a Docker container to guarantee each session is a clean session. On Linux it’s use and configuration is trivial, but on Windows it can be trickier. Outline Download jsPsychMonkeys Setup Run Monkeys 3.2.0.1 1) Download jsPsychMonkeys if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) usethis::use_course(url = &quot;gorkang/jsPsychMonkeys&quot;, destdir = &quot;~/Downloads/&quot;) 2) Setup Run setup: source(\"setup.R\"). This will install the packages needed. Ubuntu You may need to install some system libraries first: sudo apt install libssl-dev libcurl4-openssl-dev libxml2-dev Mac (?) Windows Download and install docker: https://docs.docker.com/docker-for-windows/install/ (~ 500MB) 3) Run Monkeys Open run.R and follow the instructions. Mainly: Open _targets.R file: rstudioapi::navigateToFile(\"_targets.R\") Edit parameters_monkeys_minimal. For example, launch participants 1 to 5 to the 999 protocol locally: parameters_monkeys_minimal = list(uid = 1:5, local_folder_tasks = \"Downloads/999\") Run Monkeys!: targets::tar_make() 3.3 jsPsychHelpeR: Prepare data See the jsPsychHelpeR chapter for more detailed instructions. Outline Download jsPsychHelpeR Run setup Run data preparation 1) Download jsPsychHelpeR Run the following two lines in a RStudio console. A new RStudio session will appear. You should see something similar to on the top right corner of your RStudio. # Make sure you have {usethis} installed if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) # Download jsPsychHelpeR version to the Downloads folder usethis::use_course(url = &quot;gorkang/jsPsychHelpeR&quot;, destdir = &quot;~/Downloads/&quot;) 2) Run setup Open the file run.R and run initial setup: # Load functions invisible(lapply(list.files(&quot;./R&quot;, full.names = TRUE, pattern = &quot;.R$&quot;), source)) # Run initial setup [REMEMBER to replace `999` with your project number] run_initial_setup(pid = 999) run_initial_setup() will: Delete old files Install dependencies Create necessary folders Download results files for the project only on Ubuntu Create a _targets.R file for your project IMPORTANT: You may need to manually copy the results files to the folder data/PROJECT ID 3) Run data preparation # Run data preparation targets::tar_make() If you are curious, running targets::tar_visnetwork(targets_only = TRUE) will show the whole data preparation targets tree. "],["jsPsychMaker.html", "Chapter 4 jsPsychMaker 4.1 Experiment configuration 4.2 online-offline protocols 4.3 Technical aspects", " Chapter 4 jsPsychMaker jsPsychMaker: Create experiments with jsPsych, randomize participants, etc. See QuickGuide for basic instructions. 4.1 Experiment configuration In the config.js file you can find the main parameters to control how your experiment works. 4.1.1 Main parameters pid = 999999;: Number of protocol online = true;: true if the protocol run in a server, false if runs locally max_participants = 3;: If you have between participants conditions (participants are assign to only one of a number of conditions), this is the max number of participants per condition random_id = false;: true if you want to assign a random id to participants, false if the participant needs to input an id max_time = \"24:00:00\";: Max time to complete the protocol (HH:MM:SS; Hours:Minutes:Seconds) accept_discarded = true;: If an user is discarded (over max_time), shall be allowed to continue given there are available slots? 4.1.2 Order of tasks first_tasks = ['Consent'];: The protocol will start with these tasks in the specified order randomly_ordered_tasks = [];: Randomly ordered tasks presented after first_tasks last_tasks = ['Goodbye'];: These tasks will be presented in the specified order after randomly_ordered_tasks 4.2 online-offline protocols jsPsych uses standard web technologies (HTML, CSS y Javascript), so that protocols should run in any modern browser (updated, please). We recommend Google Chrome just because our test suite runs with Google Chrome, so we will catch its specific issues earlier. 4.2.1 Offline If you want to run a protocol locally (on your computer, on a lab computer), you need to set online = false; in the config.js file. After that, just double click index.html. The 4.2.2 Online TODO: If I want to run on a server but dont have/want mysql? EXPLAIN: what controllers do: be able to continue where you left it, randomize to conditions and balance conditions… Tu run a protocol online, set online = true;. You will need a couple more things: Install MySQL A file .secrets_mysql.php with the contend below Define a route to .secrets_mysql.php in controllers/php/mysql.php require_once '../../.secrets_mysql.php'; THIS FILE SHOULD NOT BE PUBLICLY VISIBLE FROM THE BROWSER &lt;?php /* DO NOT UPLOAD TO PUBLIC REPO */ $servername = &quot;127.0.0.1&quot;; $username = &quot;USERNAME OF THE DATABASE&quot;; $password = &quot;PASSWORD OF THE DATABASE&quot;; $dbname = &quot;NAME OF THE DB&quot;; ?&gt; 4.3 Technical aspects When index.html is launched: Check if there are available slots When an uid is assigned: questions array is created between-participants conditions are assigned and stored in the DB (mysql if online, IndexedDB if offline) Each question, timeline or conditional question needs to have a: data: {trialid: 'NameTask_001', procedure: 'NameTask'} The trialid identifies the trial, and the procedure makes possible to find that trial so participants can continue the tasks where they left, know when participants finished the tasks, etc. mysql and indexeddb… "],["jsPsychMonkeys.html", "Chapter 5 jsPsychMonkeys 5.1 How to simulate participants 5.2 Parameters", " Chapter 5 jsPsychMonkeys jsPsychMonkeys: Release monkeys to a jsPsych experiment using the R package {targets}, docker and {RSelenium}. See QuickGuide for basic instructions. 5.1 How to simulate participants If the QuickGuide configuration steps didn’t work… You may need to do one of the things below: Run participants manually Use a Linux computer or create a Linux partition Create a Linux virtual machine from where to simulate participants. You can use Virtualbox to install Ubuntu. Once there, you can use this manual to prepare the system to run R &amp; RStudio 5.2 Parameters Edit the Parameters section of the _targets.R file. The minimal set of parameters needed are: parameters_monkeys_minimal = list( uid = 1:10, # User id&#39;s for the participants. local_folder_tasks = &quot;Downloads/tests/2&quot; # Location of your jsPsych protocol ) 5.2.1 Release the Monkeys! If you want a sequential process: targets::tar_make() If you want a parallel horde of monkeys: targets::tar_future_make(workers = 2) You can set as many parallel workers as you want. With targets::tar_make_future(workers = future::availableCores() - 1) you can have as many workers as your computer cores minus 1. In run.R you can see the typical set of commands needed for a variety of situations. 10 Monkeys completing a protocol in parallel. You can use targets::tar_watch(seconds = 10, outdated = FALSE, targets_only = TRUE) to see the live progress: 5.2.2 Launch monkeys on a server You will need a .vault/SERVER_PATH.R file that contains the path where the protocols are located in your server: server_path = \"http://URL_OF_YOUR_SERVER/PROTOCOLS_GENERAL_FOLDER/\" With the server_folder_tasks you will set the subfolder where the protocol is located. In the example below the monkeys would go to, http://URL_OF_YOUR_SERVER/PROTOCOLS_GENERAL_FOLDER/1 parameters_monkeys_minimal = list( uid = 1:10, # User id&#39;s for the participants. server_folder_tasks = &quot;1&quot; # Location of your jsPsych protocol ) 5.2.3 Parameters for parameters_monkeys_minimal There are a few parameters that can be useful: uid_URL = TRUE: The uid is passed in the URL (e.g. &amp;uid=1) local_folder_tasks = rep(\"Downloads/tests/test_prototol\", 25): Passing a vector of multiple tasks will make the monkeys to complete all of them. keep_alive = TRUE Keep the docker container alive after completing the tasks DEBUG = TRUE Activate DEBUG mode. Lot’s of stuff will show up in the console. open_VNC = TRUE Activate DEBUG mode and open a VNC container to see the monkey’s progress. screenshot = TRUE The monkeys will take a picture of all the pages they see. The .png files are stored in outputs/screenshots debug_file = TRUE Activate DEBUG mode and store all the console output in the outputs/log big_container = TRUE Sets the Shared memory size (/dev/shm) to 2 gigabytes. This is useful to avoid long/complex protocols to crash disable_web_security = TRUE If you are running a local protocol that loads external files (e.g. consent form in a html file), you may need this. Only works with Google Chrome. console_logs = TRUE Store the browser’s console logs. Only works with Google Chrome "],["jsPsychHelpeR.html", "Chapter 6 jsPsychHelpeR 6.1 How to prepare data 6.2 Create your own reports 6.3 Common ERRORS", " Chapter 6 jsPsychHelpeR jsPsychHelpeR: Standardize and automatize data preparation and analysis of jsPsych experiments created with jsPsychMaker. See QuickGuide for basic instructions. 6.1 How to prepare data Every jsPsychMaker task has a sister script on jsPsychHelpeR to help prepare the data automatically. run_initial_setup() will try to make sure you have all the dependencies, folders, etc., and a customized _targets.R file adapted to your protocol, so data preparation can run automagically. We use the {targets} (https://github.com/wlandau/targets) package. The whole process can be reproduced running targets::tar_make() A nice visualization of all the pre-processing steps can be seen with targets::tar_visnetwork(targets_only = TRUE) The file _targets.R contains the important parameters and calls to all the functions used when running targets::tar_make() To see more detail about any specific step, you can: Go to the relevant function Load the input parameters of the function with debug_function(NAME_OF FUNCTION). Alternatively, manually use targets::tar_load(NAME_OF_TARGET) Run the code step by step as you would normally do 6.1.1 Output tables and plots Raw data (anonymized) are in data/raw_data_anonymized.csv Plots, tables and reports are in outputs/plots, outputs/tablesand outputs/reports respectively. Dataframes for different stages of data processing can be seen in outputs/data 6.2 Create your own reports You can use any of the template reports in the _targets.R file, or create your own reports. We will start opening one of the template reports: rstudioapi::navigateToFile(\"doc/report_analysis.Rmd\"). Edit the RMarkdown file to adapt it to your needs. If you already did targets::tar_make(), when running targets::tar_load(DF_analysis) the dataframe DF_analysis will load in your Environment. Go back to the _targets.R file: Look for # Analysis report and uncomment the following lines: # tar_render(report_analysis, &quot;doc/report_analysis.Rmd&quot;, # output_file = paste0(&quot;../outputs/reports/report_analysis.html&quot;)), When you finished editing and uncomented the tar_render command, go back to the run.R file: targets::tar_make() 6.3 Common ERRORS 6.3.1 run_initial_setup(): x Can find server credentials in &#39;.vault/.credentials&#39; x 0 tasks found for protocol &#39;TU NUMERO DE PROYECTO&#39;. NOT creating _targets.R file 6.3.1.1 On Linux (Ubuntu): IF you have the server credentials: Open .credentials_TEMPLATE rstudioapi::navigateToFile(\".vault/.credentials_TEMPLATE\") Edit the file with your server credentials Rename the file to .credentials IF you DON’T have the credentials but you have the .csv results files: Copy the csv files to the folder data/YOUR_PROJECT_NUMBER Run again run_initial_setup() 6.3.2 On Mac or Windows: Copy the csv files to the folder data/YOUR_PROJECT_NUMBER Run again run_initial_setup() "],["references.html", "References", " References jsPsych targets "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
