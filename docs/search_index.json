[["index.html", "jsPsychR manual Chapter 1 What is jsPsychR?", " jsPsychR manual Gorka Navarrete 2021-10-05 Chapter 1 What is jsPsychR? jsPsychR is a group of tools to help create experimental paradigms with jsPsych, simulate participants and standardize the data preparation and analysis. We have three main tools: jsPsychMaker: Create experiments with jsPsych, randomize participants, etc. jsPsychMonkeys: Release monkeys to a jsPsych experiment using the R package {targets}, docker and {RSelenium}. jsPsychHelpeR: Standardize and automatize data preparation and analysis of jsPsych experiments created with jsPsychMaker. "],["intro.html", "Chapter 2 Experimentos reproducibles 2.1 Pipeline experimental abierto y reproducible", " Chapter 2 Experimentos reproducibles En el CSCN usamos distintas tecnologías para desarrollar experimentos. Algunos ejemplos son Psychopy, Qualtrics, Limesurvey, jsPsych, Gorilla, etc. Cada una de estas tiene ventajas y desventajas, y en general es importante tener en cuenta aspectos pragmáticos a la hora de adoptar una u otra tecnología (coste económico, tipo de experimento [EEG/conductual, laboratorio/online]). Algunos de nosotros hemos optado principalmente por jsPsych para experimentos conductuales por tratarse de una librería javascript de código abierto, basada en tecnologías web standard, y que puede ser usada online y offline. Dado que en el CSCN disponemos de servidor propio, los costos habituales de hosting no se aplican. En los últimos años, hemos empezado a trabajar en un conjunto de herramientas para crear experimentos usando la librería jsPsych con jsPsychMaker, simular participantes con jspsychMonkeys y estandarizar y automatizar la preparación de datos con jsPsychHelpeR. Nuestro objetivo final es tener un gran número de tareas disponibles para ser usadas en el repositorio de jsPsychMaker. Cada una de estas tareas funcionará en jspsychMonkeys para crear participantes virtuales. Cada tarea tendrá un script hermano en jsPsychHelpeR para automatizar la preparación de datos. 2.1 Pipeline experimental abierto y reproducible Replicar el experimento a partir de una publicación no es trivial. Una de las fortalezas fundamentales de este sistema es que compartir y reproducir un experimento y los análisis asociados se convierte en algo muy sencillo. Además, todos los componentes del proceso son código abierto, lo que permite que revisores, colaboradores, etc. puedan verificar que no hay errores en el código. Con este sistema podremos crear fácilmente el código del experimento, simular datos y preparar datos de manera casi automática (incluyendo anonimizacion). El output del sistema es estandarizado, lo que implica que los nombres de las variables y la estructura de datos son predecibles. Finalmente, la generación de gráficas, tablas, reportes y los análisis son reproducibles. "],["jsPsychMaker.html", "Chapter 3 jsPsychMaker 3.1 Como crear un protocolo experimental 3.2 Configuración del experimento", " Chapter 3 jsPsychMaker jsPsychMaker: Create experiments with jsPsych, randomize participants, etc. 3.1 Como crear un protocolo experimental Para crear un protocolo experimental, lo único que tendrás que hacer es: Descargar jsPsychMaker Ir a la carpeta canonical_protocols y editar un archivo para seleccionar las tareas que necesitas Abrir index.html en tu navegador Dentro de la carpeta canonical_protocol/ del repositorio de jsPsychMaker tenemos un listado exhaustivo de tareas disponibles para ser usadas. 1) Descargar jsPsychMaker Descargamos el proyecto de RStudio jsPsychMaker: # Se asegura que el paquete {usethis} está instalado if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) # Descargamos jsPsychMaker a la carpeta Downloads usethis::use_course(url = &quot;gorkang/jsPsychMaker&quot;, destdir = &quot;~/Downloads/&quot;) # En la consola aparecerá la pregunta: &#39;Shall we delete the ZIP file (&#39;gorkang-jsPsychMaker-123fa42.zip&#39;)? # Puedes decirle que SI 2) Editar configuración En a la carpeta canonical_protocols editamos config.js para dejar en la variable not_ordered_experiments solo aquellas tareas que queremos conservar. Si estás usando la version jsPsychMaker v0.0.1, deberás editar index.html en lugar de config.js. 3) Correr experimento El experimento esta listo para ser utilizado localmente. Podemos hacerlo abriendo index.html en Google Chrome o tu navegador preferido 3.2 Configuración del experimento En el archivo config.js encontrarás algunos parámetros para definir como funciona tu experimento. Los principales son: 3.2.1 Main parameters pid = 999999;: Número del protocolo online = true;: true si el protocolo corre en un servidor, false si corre localmente max_participants = 3;: Si tienes condiciones between participants, número máximo de participantes por condición random_id = false;: true si se asigna un numero de participante aleatorio, false si el participante tiene que indicar su número max_time = \"24:00:00\";: Tiempo máximo para completar el protocolo desde que se inicia (HH:MM:SS; Horas:Minutos:Segundos) accept_discarded = true;: Si un usuario es descartado (supera max_time), se le debería permitir continuar (si aun quedan cupos) 3.2.2 Orden de tareas first_tasks = ['Consent'];: Conjunto de tareas iniciales. Se presentan en el orden que aparecen aquí randomly_ordered_tasks = [];: Tareas ordenadas aleatoriamente que se presentan después de las first_tasks last_tasks = ['Goodbye'];: Tareas presentadas secuencialmente después de randomly_ordered_tasks "],["jsPsychMonkeys.html", "Chapter 4 jsPsychMonkeys 4.1 Como simular datos", " Chapter 4 jsPsychMonkeys jsPsychMonkeys: Release monkeys to a jsPsych experiment using the R package {targets}, docker and {RSelenium}. 4.1 Como simular datos El sistema para simular participantes utiliza Selenium dentro de un contenedor de Docker. En Linux es trivial su uso, pero en Windows su configuración puede ser más compleja. Puedes seguir los siguientes pasos, pero si no tienes una instalación funcional de Docker que utilice contenedores Linux, el sistema fallará. En ese caso, quedan las siguientes opciones: Correr un par de participantes manualmente Usar un ordenador con Linux o crear una partición Linux Crear una máquina virtual linux desde la que simular participantes. Puedes usar Virtualbox para instalar Ubuntu. Una vez dentro, tendrás que seguir los pasos del manual para prepara el sistema para correr R y RStudio [Solo Windows] Descargamos e instalamos docker: https://docs.docker.com/docker-for-windows/install/ [~ 500MB] Descargamos el proyecto de RStudio jsPsychMonkeys: if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) usethis::use_course(url = &quot;gorkang/jsPsychMonkeys&quot;, destdir = &quot;~/Downloads/&quot;) # Select YES to delete zip Abrimos run.R y seguimos las instrucciones. "],["jsPsychHelpeR.html", "Chapter 5 jsPsychHelpeR 5.1 Como preparar datos 5.2 ERRORES comunes", " Chapter 5 jsPsychHelpeR jsPsychHelpeR: Standardize and automatize data preparation and analysis of jsPsych experiments created with jsPsychMaker. 5.1 Como preparar datos Cada tarea de jsPsychMaker tendrá un script hermano en jsPsychHelpeR para automatizar la preparación de datos. Una vez tengamos nuestro protocolo listo, con la función run_initial_setup() de jsPsychHelpeR crearemos todo lo necesario para que la preparación de datos corra automáticamente. Descargamos el proyecto de RStudio jsPsychHelpeR Abre RStudio y ejecuta las dos lineas de abajo en la Consola. Esto abrirá una nueva ventana con una copia del proyecto jsPsychHelpeR. En la parte superior derecha de RStudio verás algo similar a: # Se asegura que el paquete {usethis} está instalado if (!require(&#39;usethis&#39;)) install.packages(&#39;usethis&#39;); library(&#39;usethis&#39;) # Descargamos jsPsychHelpeR a la carpeta Downloads usethis::use_course(url = &quot;gorkang/jsPsychHelpeR&quot;, destdir = &quot;~/Downloads/&quot;) # En la consola aparecerá la pregunta: &#39;Shall we delete the ZIP file (&#39;gorkang-jsPsychHelpeR-123fa42.zip&#39;)? # Puedes decirle que SI Abrimos el archivo run.R y seguimos las instrucciones. # Cargamos las funciones invisible(lapply(list.files(&quot;./R&quot;, full.names = TRUE, pattern = &quot;.R$&quot;), source)) # Corremos el setup inicial [RECUERDA reemplazar `999` con el número de tu proyecto] run_initial_setup(pid = 999) # Finalmente, corremos la preparación de datos targets::tar_make() run_initial_setup() hará lo siguiente: Borrar archivos antiguos Instalar dependencias Crear carpetas necesarias Descargar archivos de resultados del proyecto solo en Ubuntu Crear un archivo _targets.R adaptado a los archivos del proyecto 5.2 ERRORES comunes Si te aparecen los siguientes errores al correr run_initial_setup(): x Can find server credentials in &#39;.vault/.credentials&#39; x 0 tasks found for protocol &#39;TU NUMERO DE PROYECTO&#39;. NOT creating _targets.R file 5.2.1 Si estas en Linux (Ubuntu): Tienes las credenciales para acceder al servidor: Abre .credentials_TEMPLATE rstudioapi::navigateToFile(\".vault/.credentials_TEMPLATE\") Introduce los detalles para conectarte al servidor Renombra el archivo a .credentials NO tienes las credenciales pero si los archivos .csv de resultados: Descarga los archivos del servidor a la carpeta data/TU NUMERO DE PROYECTO Vuelve a correr run_initial_setup() 5.2.2 Si estas en Windows o Mac: Descarga los archivos del servidor a la carpeta data/TU NUMERO DE PROYECTO Vuelve a correr run_initial_setup() "],["references.html", "References", " References jsPsych targets "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
